<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rycf.gjb.dao.RoleDao">
<cache eviction="LRU" flushInterval="60000" size="1024" readOnly="true"/> 
	<resultMap type="com.rycf.gjb.dto.RoleManagerDTO" id="roleDTO">
		<id property="roleId" column="roleId" />
		<result property="roleName" column="roleName" />
		<result property="status" column="status" />
		<result property="createDate" column="createDate" />
		<result property="updateDate" column="updateDate" />
		<association property="createUser" column="createUserId" javaType="com.rycf.gjb.dto.SystemUserDTO" >
			<id property="systemUserId" column="createUserId"/>
		</association>
		<association property="updateUser" column="updateUserId" javaType="com.rycf.gjb.dto.SystemUserDTO">
			<id property="systemUserId" column="updateUserId"/>
		</association>
	</resultMap>
	<select id="getRoleById"  resultMap="roleDTO"  useCache="false">  
			select r.roleId,r.roleName,r.status,r.createDate,r.createUserId,r.updateDate,r.updateUserId
		from role_manager r where r.roleId=#{id} 
	</select>
	<select id="getAllRole"  resultMap="roleDTO" useCache="true" >  
			select r.roleId,r.roleName,r.status,r.createDate,r.createUserId,r.updateDate,r.updateUserId
		from role_manager r where r.status='1' 
	</select>
	<select id="getCountByParam"  resultType="int" useCache="true">  
		select count(1) from role_manager r where 1=1
		<if test="status !=null">
			and r.status=#{status}
		</if>
	</select>
	<select id="getRoleByPageAndParam"  resultMap="roleDTO" useCache="false"> 
		select r.roleId,r.roleName,r.status,r.createDate,r.createUserId,r.updateDate,r.updateUserId
		from role_manager r order by r.roleId asc limit ${(page.pageIndex-1)*page.pageSize},${page.pageSize}
	</select>
	<update id="saveRole" flushCache="true">
		insert into role_manager (roleId,roleName,status,createDate,createUserId)
		values(#{roleManager.roleId},#{roleManager.roleName},#{roleManager.status},
		#{roleManager.createDate},#{roleManager.createUserId})
	</update>
	<update id="updateRole" flushCache="true">
		update role_manager r set
			<if test="roleManager.status !=null">
				 r.status=#{roleManager.status},
			</if>
			<if test="roleManager.roleName !=null">
				 r.roleName=#{roleManager.roleName},
			</if>
			<if test="roleManager.updateDate !=null">
				 r.updateDate=#{roleManager.updateDate},
			</if>
			<if test="roleManager.updateUserId !=null">
				 r.updateUserId=#{roleManager.updateUserId},
			</if>
			r.roleId=#{roleManager.roleId} where r.roleId=#{roleManager.roleId}
	</update>
</mapper>  